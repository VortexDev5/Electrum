name: Create 10 Custom Issues

on:
  workflow_dispatch:

permissions:
  issues: write

jobs:
  post_issues:
    runs-on: ubuntu-latest

    steps:
      - name: Post 10 Customized Issues with Metadata
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issues = [
              { title: "üêõ Bug: Profile picture not saving", body: "Users are unable to upload or change their profile pictures. The upload seems successful but the image doesn't update.", labels: ["bug", "frontend", "urgent"] },
              { title: "üöÄ Feature: Multi-language support", body: "Allow users to switch the app language between English, Spanish, and French from their settings page.", labels: ["feature", "localization"] },
              { title: "üé® UI: Revamp login screen", body: "The login page needs to align with the new branding guidelines including fonts, colors, and spacing.", labels: ["design", "frontend", "enhancement"] },
              { title: "üì¶ Dependency: Upgrade Axios", body: "Upgrade Axios to the latest version to address recently patched security vulnerabilities.", labels: ["update", "security"] },
              { title: "üõ†Ô∏è Refactor: User controller logic", body: "Break down large methods in the user controller into smaller reusable functions for readability.", labels: ["refactor", "backend"] },
              { title: "üß™ Test: Payment validation", body: "Write integration tests for the payment validation flow, covering success, failure, and edge cases.", labels: ["test", "backend"] },
              { title: "üìù Docs: Environment variables", body: "Add a section to the README listing and explaining each environment variable required to run the app locally.", labels: ["documentation"] },
              { title: "üîí Security: Input sanitization", body: "Ensure all user inputs in the comments section are properly sanitized to prevent XSS attacks.", labels: ["security", "bug"] },
              { title: "üåê i18n: Translate error messages", body: "Translate system error messages into supported languages and ensure they display correctly.", labels: ["localization", "frontend"] },
              { title: "üìä Analytics: Track search usage", body: "Add analytics to capture how frequently users are using the search bar and what they search for.", labels: ["analytics", "feature"] },
              { title: "üêõ Bug: Duplicate notifications", body: "Some users report receiving the same notification multiple times, especially on mobile devices.", labels: ["bug", "mobile"] },
              { title: "üöÄ Feature: Offline mode", body: "Introduce an offline mode for core features such as notes and task lists, with sync on reconnect.", labels: ["feature", "frontend", "mobile"] },
              { title: "üé® UI: Improve error states", body: "Redesign error states across the app with consistent icons, messages, and retry buttons.", labels: ["design", "enhancement"] },
              { title: "üì¶ Dependency: Remove unused libs", body: "Audit and remove any dependencies that are no longer used to reduce bundle size.", labels: ["refactor", "update"] },
              { title: "üõ†Ô∏è Refactor: Notification system", body: "Separate notification logic into its own module and improve pub/sub handling.", labels: ["refactor", "backend"] },
              { title: "üß™ Test: User permissions", body: "Write tests to validate user permission logic for accessing admin routes and features.", labels: ["test", "security"] },
              { title: "üìù Docs: Deployment checklist", body: "Add a deployment checklist that includes environment validation, migrations, and health checks.", labels: ["documentation"] },
              { title: "üîí Security: JWT expiration", body: "Update JWT tokens to expire in 15 minutes and implement refresh token flow.", labels: ["security", "backend"] },
              { title: "üåê i18n: RTL support", body: "Enable proper right-to-left (RTL) layout for Arabic and Hebrew users.", labels: ["localization", "frontend"] },
              { title: "üìä Analytics: Page views", body: "Implement page view tracking with route-level granularity using Google Analytics.", labels: ["analytics", "frontend"] },
              { title: "üêõ Bug: Timezone mismatch", body: "Events created in different timezones show the wrong time on the calendar.", labels: ["bug", "backend", "frontend"] },
              { title: "üöÄ Feature: Invite teammates", body: "Let users invite teammates by email to join their workspace with defined roles.", labels: ["feature", "backend"] },
              { title: "üé® UI: Mobile nav improvements", body: "Improve bottom navigation usability on smaller screen sizes and foldable devices.", labels: ["design", "mobile", "enhancement"] },
              { title: "üì¶ Dependency: Update Tailwind", body: "Update TailwindCSS to the latest version and test compatibility with current styles.", labels: ["update", "frontend"] },
              { title: "üõ†Ô∏è Refactor: Session handler", body: "Abstract session management into a reusable module across all auth flows.", labels: ["refactor", "backend"] },
              { title: "üß™ Test: 2FA flow", body: "Write end-to-end tests for the 2-factor authentication (2FA) setup and login process.", labels: ["test", "security", "feature"] },
              { title: "üìù Docs: API rate limits", body: "Add documentation around rate limiting rules for public APIs including limits per IP.", labels: ["documentation", "api"] },
              { title: "üîí Security: Role-based access", body: "Audit the RBAC system to ensure all endpoints properly respect user roles and permissions.", labels: ["security", "backend"] },
              { title: "üåê i18n: Missing keys audit", body: "Run an audit to identify untranslated keys or hardcoded strings across components.", labels: ["localization", "test"] },
              { title: "üìä Analytics: User retention", body: "Add retention cohort tracking to analyze how many users return after their first week.", labels: ["analytics", "backend"] },
              { title: "üêõ Bug: Form reset fails", body: "Resetting the form after submission leaves old data in some fields, causing confusion.", labels: ["bug", "frontend"] },
            ];

            const milestoneTitle = "v1.0";
            const assignees = ["VortexDev5"]; // üëà change to your GitHub username

            // Get milestone ID from title
            const { data: milestones } = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const milestone = milestones.find(m => m.title === milestoneTitle);

            if (!milestone) {
              throw new Error(`‚ùå Milestone '${milestoneTitle}' not found.`);
            }

            for (const issue of issues) {
              const response = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issue.title,
                body: issue.body,
                labels: issue.labels,
                assignees,
                milestone: milestone.number
              });

              console.log(`‚úÖ Created: ${response.data.title} ‚Äî ${response.data.html_url}`);
            }
